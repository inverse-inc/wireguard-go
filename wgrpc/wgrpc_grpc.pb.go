// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package wgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WGServiceClient is the client API for WGService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WGServiceClient interface {
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error)
	GetPeers(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeersReply, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error)
	PrintDebug(ctx context.Context, in *PrintDebugRequest, opts ...grpc.CallOption) (*PrintDebugReply, error)
}

type wGServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWGServiceClient(cc grpc.ClientConnInterface) WGServiceClient {
	return &wGServiceClient{cc}
}

func (c *wGServiceClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/WGService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wGServiceClient) GetPeers(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeersReply, error) {
	out := new(PeersReply)
	err := c.cc.Invoke(ctx, "/WGService/GetPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wGServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error) {
	out := new(StopReply)
	err := c.cc.Invoke(ctx, "/WGService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wGServiceClient) PrintDebug(ctx context.Context, in *PrintDebugRequest, opts ...grpc.CallOption) (*PrintDebugReply, error) {
	out := new(PrintDebugReply)
	err := c.cc.Invoke(ctx, "/WGService/PrintDebug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WGServiceServer is the server API for WGService service.
// All implementations must embed UnimplementedWGServiceServer
// for forward compatibility
type WGServiceServer interface {
	GetStatus(context.Context, *StatusRequest) (*StatusReply, error)
	GetPeers(context.Context, *PeersRequest) (*PeersReply, error)
	Stop(context.Context, *StopRequest) (*StopReply, error)
	PrintDebug(context.Context, *PrintDebugRequest) (*PrintDebugReply, error)
	mustEmbedUnimplementedWGServiceServer()
}

// UnimplementedWGServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWGServiceServer struct {
}

func (UnimplementedWGServiceServer) GetStatus(context.Context, *StatusRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedWGServiceServer) GetPeers(context.Context, *PeersRequest) (*PeersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeers not implemented")
}
func (UnimplementedWGServiceServer) Stop(context.Context, *StopRequest) (*StopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedWGServiceServer) PrintDebug(context.Context, *PrintDebugRequest) (*PrintDebugReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintDebug not implemented")
}
func (UnimplementedWGServiceServer) mustEmbedUnimplementedWGServiceServer() {}

// UnsafeWGServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WGServiceServer will
// result in compilation errors.
type UnsafeWGServiceServer interface {
	mustEmbedUnimplementedWGServiceServer()
}

func RegisterWGServiceServer(s grpc.ServiceRegistrar, srv WGServiceServer) {
	s.RegisterService(&_WGService_serviceDesc, srv)
}

func _WGService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WGServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WGService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WGServiceServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WGService_GetPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WGServiceServer).GetPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WGService/GetPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WGServiceServer).GetPeers(ctx, req.(*PeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WGService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WGServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WGService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WGServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WGService_PrintDebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrintDebugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WGServiceServer).PrintDebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WGService/PrintDebug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WGServiceServer).PrintDebug(ctx, req.(*PrintDebugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WGService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WGService",
	HandlerType: (*WGServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _WGService_GetStatus_Handler,
		},
		{
			MethodName: "GetPeers",
			Handler:    _WGService_GetPeers_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _WGService_Stop_Handler,
		},
		{
			MethodName: "PrintDebug",
			Handler:    _WGService_PrintDebug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wgrpc.proto",
}
